name: PR Checks
on:
  pull_request:
    types: [opened, edited, reopened, synchronize]
    branches:
      - develop
      - main
      - staging
      - "story/**"

jobs:
  test-and-lint:
    permissions:
      issues: write
      pull-requests: write
    runs-on: ubuntu-latest
    
    steps:
      - name: Make scripts executable
        run: chmod +x .github/scripts/*.sh
      - name: Checkout code
        uses: actions/checkout@v4

      # Authorization Check - Must be early in the workflow
      - name: Check PR author authorization
        id: check_authorization
        continue-on-error: true
        if: github.base_ref == 'staging' || github.base_ref == 'main'
        run: |
          if [[ "${{ github.actor }}" != "nyplex" ]]; then
            echo "ERROR: User ${{ github.actor }} is not authorized to create PRs targeting ${{ github.base_ref }}"
            echo "Only 'nyplex' can create PRs targeting staging or main branches"
            exit 1
          fi
          echo "âœ… User ${{ github.actor }} is authorized for ${{ github.base_ref }} branch"

      - name: Notify Slack - unauthorized PR author
        if: failure() && steps.check_authorization.outcome == 'failure'
        run: ./.github/scripts/notify-slack.sh "UNAUTHORIZED_AUTHOR"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_ACTOR: ${{ github.actor }}
          BASE_REF: ${{ github.base_ref }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      # PR Title Validation
      - name: Validate PR title for Jira key
        id: validate_pr_title
        continue-on-error: true
        run: ./.github/scripts/validate-pr-title.sh
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
          BASE_REF: ${{ github.event.pull_request.base.ref }}

      - name: Notify Slack - PR title validation failed
        if: steps.validate_pr_title.outcome == 'failure'
        run: ./.github/scripts/notify-slack.sh "PR_TITLE_FAILED"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_ACTOR: ${{ github.actor }}

      # Unit Tests
      - name: Run unit tests
        id: run_tests
        continue-on-error: true
        run: |
          set -o pipefail
          npm test 2>&1 | tee test_output.log

      - name: Upload test output log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test_output.log
          path: test_output.log

      - name: Notify Slack - tests failed
        if: steps.run_tests.outcome == 'failure'
        run: ./.github/scripts/notify-slack.sh "TESTS_FAILED"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_ACTOR: ${{ github.actor }}

      # Linting
      - name: Run linter
        id: run_lint
        run: |
          set -o pipefail
          npm run lint 2>&1 | tee lint_output.log

      - name: Upload lint output log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint_output.log
          path: lint_output.log

      - name: Notify Slack - linter failed
        if: steps.run_lint.outcome == 'failure'
        run: ./.github/scripts/notify-slack.sh "LINT_FAILED"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_ACTOR: ${{ github.actor }}

      # EAS Label Management (only if all checks passed)
      - name: Manage EAS labels
        if: |
          steps.run_tests.outcome == 'success' && 
          steps.run_lint.outcome == 'success' && 
          steps.validate_pr_title.outcome == 'success' &&
          (github.base_ref == 'develop' || github.base_ref == 'main')
        run: ./.github/scripts/manage-eas-labels.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BASE_REF: ${{ github.base_ref }}
          REPO: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}

      # Success Notification
      - name: Notify Slack - all checks passed
        if: |
          steps.run_tests.outcome == 'success' && 
          steps.run_lint.outcome == 'success' &&
          (steps.validate_pr_title.outcome == 'success' || github.base_ref != 'develop')
        run: ./.github/scripts/notify-slack.sh "ALL_PASSED"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_ACTOR: ${{ github.actor }}
          BASE_REF: ${{ github.base_ref }}